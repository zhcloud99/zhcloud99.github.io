<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhcloud</title>
  
  <subtitle>zh的个人博客</subtitle>
  <link href="https://zhcloud99.github.io/atom.xml" rel="self"/>
  
  <link href="https://zhcloud99.github.io/"/>
  <updated>2021-04-07T11:16:18.015Z</updated>
  <id>https://zhcloud99.github.io/</id>
  
  <author>
    <name>zhcloud</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于栈与方法调用</title>
    <link href="https://zhcloud99.github.io/20210407071235.html"/>
    <id>https://zhcloud99.github.io/20210407071235.html</id>
    <published>2021-04-07T11:12:35.000Z</published>
    <updated>2021-04-07T11:16:18.015Z</updated>
    
    <content type="html"><![CDATA[<p>(<strong>参考文章</strong>)[<a href="https://blog.csdn.net/Casuall/article/details/99284422]">https://blog.csdn.net/Casuall/article/details/99284422]</a></p><hr><p>&ensp;&ensp;&ensp;&ensp;栈帧也叫过程活动记录，是编译器用来实现过程/函数调用的一种数据结构。简言之，栈帧就是利用EBP（栈帧指针，请注意不是ESP）寄存器访问局部变量、参数、函数返回地址等的手段。<br>&ensp;&ensp;&ensp;&ensp;每一次函数的调用，都会在调用栈（call stack）上维护一个独立的栈帧（stack frame）。每个独立的栈帧一般包括：</p><ul><li>函数的返回地址和参数</li><li>临时变量：包括函数的非静态局部变量以及编译器自动生成的其他临时变量</li><li>函数调用的上下文<br>&ensp;&ensp;&ensp;&ensp;栈是从高地址向低地址延伸，一个函数的栈帧用EBP和ESP这两个寄存器来划定范围。EBP指向当前栈帧的底部，ESP始终指向栈帧的顶部。<br>&ensp;&ensp;&ensp;&ensp;EBP寄存器又被称为帧指针（Frame Pointer）<br>&ensp;&ensp;&ensp;&ensp;ESP寄存器又被称为栈指针（Stack Pointer）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;(&lt;strong&gt;参考文章&lt;/strong&gt;)[&lt;a href=&quot;https://blog.csdn.net/Casuall/article/details/99284422]&quot;&gt;https://blog.csdn.net/Casuall/article/details/9</summary>
      
    
    
    
    <category term="随想" scheme="https://zhcloud99.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="胡思乱想" scheme="https://zhcloud99.github.io/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>byte类型取值范围为什么是127到-128?</title>
    <link href="https://zhcloud99.github.io/20210406075705.html"/>
    <id>https://zhcloud99.github.io/20210406075705.html</id>
    <published>2021-04-06T11:57:05.000Z</published>
    <updated>2021-04-06T12:04:46.778Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/heixuanfenghei/article/details/80403644?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2"><strong>参考文章</strong></a><br>&ensp;&ensp;&ensp;&ensp;一个byte由八个位组成，如00000000，其中，前7位表示数值，第8位是符号位（0为正，1为负）。这样+1就是00000001，-1就是10000001。最大的正数就是01111111，即2^0+2^1+……+2^6=127；最小的负数，同理，为1 1111111，即-127。<br>&ensp;&ensp;&ensp;&ensp;到这里应该是许多人不明白的地方，为什么负数会到-128？<br>&ensp;&ensp;&ensp;&ensp;上述的描述会出现一个问题，就是0，会出现一个+0和一个-0。印度人他们规定-0为-128，这样就与计算机的补码（程序都是按补码运行的）完美的结合在一起。<br>&ensp;&ensp;&ensp;&ensp;以此类推，int，short，long都可以推出他们的取值范围。<br>&ensp;&ensp;&ensp;&ensp;根据微机原理，机器字长为n位的补码数，其真值的取值范围是-（2^（n-1））~+2^（n-1）+1），这里的取值范围可按照这个规定来计算。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/heixuanfenghei/article/details/80403644?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogComme</summary>
      
    
    
    
    <category term="随想" scheme="https://zhcloud99.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="胡思乱想" scheme="https://zhcloud99.github.io/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>存储器</title>
    <link href="https://zhcloud99.github.io/20210404025820.html"/>
    <id>https://zhcloud99.github.io/20210404025820.html</id>
    <published>2021-04-04T06:58:20.000Z</published>
    <updated>2021-04-04T07:03:02.146Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/20210404025820/clipboard.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/20210404025820/clipboard.png&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="随想" scheme="https://zhcloud99.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="胡思乱想" scheme="https://zhcloud99.github.io/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>C++与Java内存泄露问题</title>
    <link href="https://zhcloud99.github.io/20210401095655.html"/>
    <id>https://zhcloud99.github.io/20210401095655.html</id>
    <published>2021-04-01T01:56:55.000Z</published>
    <updated>2021-04-01T02:38:06.005Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/u012516166/article/details/77014910"><strong>参考文章</strong></a></p><p>&ensp;&ensp;&ensp;&ensp;因为没有系统的学习过C++，闲来无事与教研室学C++同学的同学简单聊了两句，了解了下C++，又胡思乱想了一些东西。<br>&ensp;&ensp;&ensp;&ensp;C是面向过程的，C++也是封装、继承、多态、面向对象的与Java一样的。只不过C++的同学好像会花大量的时间学习指针的操作，对内存空间进行管理，防止内存泄露等问题。但是像我这种菜鸡Java，好像还没考虑过内存泄露这种事情，毕竟JVM的GC都替我做了，但是还是有必要简单了解下JVM的GC机制。</p><hr><p>&ensp;&ensp;&ensp;&ensp;Java 程序运行时使用的内存空间主要是堆、栈、方法区。</p><ul><li>方法区：主要存放静态数据、全局 static数据和常量。这块内存在程序编译时就已经分配好，并且在程序整个运行期间都存在。</li><li>栈区 ：当方法被执行时，方法体内的局部变量（其中包括基础数据类型、对象的引用）都在栈上创建，并在方法执行结束时这些局部变量所持有的内存将会自动被释放。因为栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。</li><li>堆区 ： 又称动态内存分配，通常就是指在程序运行时直接 new 出来的内存，也就是对象的实例。这部分内存在不使用时将会由 Java 垃圾回收器来负责回收。</li></ul><p><strong>Java内存管理</strong><br>&ensp;&ensp;&ensp;&ensp;Java的内存管理就是对象的分配和释放问题。Java程序分配了内存空间，内存释放由GC完成。在Java程序运行的过程中，为了能够正确释放对象，GC会监视每一个对象的状态（这也是为什么Java比C++慢吧），当判断这个对象不可达时，就会被GC回收掉。</p><p><strong>内存泄露</strong><br>&ensp;&ensp;&ensp;&ensp;GC回收的对象都是不可达的，但是如果这个对象是可达的，但是在程序中又不会被使用到，GC就无法回收，就会出现内存泄露。而在C++中因为没有GC机制，即使此对象是不可达的也无法被自动回收，不回收的话当然会出现内存泄露的情况。所以就内存泄露的范围来说，Java要比C++小。<br>&ensp;&ensp;&ensp;&ensp;C++程序员说Java程序员不懂内存管理，是因为大部分内存管理的工作JVM都替我们做了。但是我觉得有同样编码经验的初、中级C++与Java程序员，内存管理不一定有Java程序员做的好，毕竟JVM底层也是C++写的，初、中级的C++程序员是否能写出性能优于JVM的内存管理机制（我猜的，嘻嘻~）。<br>&ensp;&ensp;&ensp;&ensp;综上所述，Java是世界上最好的语言。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u012516166/article/details/77014910&quot;&gt;&lt;strong&gt;参考文章&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;因为没有系统的学习过C+</summary>
      
    
    
    
    <category term="随想" scheme="https://zhcloud99.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="胡思乱想" scheme="https://zhcloud99.github.io/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>关于数据类型与数据结构</title>
    <link href="https://zhcloud99.github.io/20210330054148.html"/>
    <id>https://zhcloud99.github.io/20210330054148.html</id>
    <published>2021-03-30T09:41:48.000Z</published>
    <updated>2021-03-30T09:50:32.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关系总结"><a href="#关系总结" class="headerlink" title="关系总结:"></a><strong>关系总结:</strong></h2><p>&ensp;&ensp;&ensp;&ensp;数据类型以代码的方式实现了数据的结构（借助逻辑结构这种数学模型实现在计算机中的物理结构），并实现了对数据的操作。</p><h2 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a><strong>思路解析</strong></h2><p>&ensp;&ensp;&ensp;&ensp;个人对数据类型理解：在冯诺曼的计算机体系结构中，所有的数据在计算机中都是以二进制的形式存在的，所以对计算机的存储设备来说，并没有数据类型这种东西。但是人们为了方便使用计算机处理数据并合理分配内存空间（因为不同的数据在计算机中占用不同的内存空间，为了合理使用内存空间，就必须对数据加以区分），就不断发展出了各种计算机语言。比如像汇编语言这种低级语言，在使用数据定义伪指令定义变量时，直接定义了变量在内存中占用的空间，通过数值表达式的方式区分变量。为了增加计算机语言的可读性，方便用户使用，于是出现了高级计算机语言，高级编程语言就直接定义了基本数据类型，我们不需要了解它内部是如何组成的，内存空间的管理分配也不需要我们去做，直接拿来用就可以了。而当表示复杂数据对象时，仅使用几种基本数据类型显然是不够的，便出现了抽象数据类型，用户可以使用抽象数据类型表示数据以及对数据的操作。<br>&ensp;&ensp;&ensp;&ensp;数据结构是相互之间存在一种或多种特定关系的数据元素的集合，简单的说是计算机中存储、组织数据的方式。其包括逻辑结构和物理结构。</p><ul><li>逻辑结构：逻辑结构是指数据元素之间的逻辑关系，独立于数据在计算机的存储方式，数据的逻辑结构可以看作是从具体问题抽象出来的数学模型。逻辑结构又分为线性结构（数组、链表、栈、队列）和非线性结构（树、图）。</li><li>物理结构：物理结构需要借助于计算机语言实现，决定数据是如何在计算机内存中存储的。数据的存储结构主要有：顺序存储、链式存储、索引存储和散列存储。</li></ul><p>&ensp;&ensp;个人对数据类型与数据结构之间关系的理解：数据类型以代码的方式实现了数据结构，代码编写的逻辑是借助数据结构的逻辑结构实现的，而借助这种逻辑结构实现的代码在计算机中运行后（运算处理数据），代码所处理后的数据在计算机中的存储方式也确定了，即实现了数据结构的物理结构。所以数据类型包含了数据类型（逻辑结构与物理结构）以及对数据的运算。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关系总结&quot;&gt;&lt;a href=&quot;#关系总结&quot; class=&quot;headerlink&quot; title=&quot;关系总结:&quot;&gt;&lt;/a&gt;&lt;strong&gt;关系总结:&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;数据类型以代码的方式实现了数据的结构（</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://zhcloud99.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构与算法" scheme="https://zhcloud99.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构概述</title>
    <link href="https://zhcloud99.github.io/20210330053023.html"/>
    <id>https://zhcloud99.github.io/20210330053023.html</id>
    <published>2021-03-30T09:30:23.000Z</published>
    <updated>2021-03-30T09:36:57.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>&ensp;&ensp;&ensp;&ensp;数据类型是一个值的集合和定义在此集合上一组操作（通常是增删改查或者操作读写的方法）的总称。其中数据类型，总的来说又分：</p><ul><li>原子类型（基本数据类型）：比如编程语言的int，double，char，byte，boolean。</li><li>复合类型（抽象数据类型）：又称结构类型，通过原子类型封装的更复杂的类型，比如面向对象语言里面的类。</li><li>抽象数据类型：抽象就是抽取出实际问题的本质。在计算机中使用二进制数来表示数据，在汇编语言中则可给出各种数据的十进制表示，它们是二进制数据的抽象，使用者在编程时可以直接使用，不必考虑实现细节。在高级语言中，则给出更高一级的数据抽象，出现了数据类型，如整型、实型、字符型等，可以进一步利用这些类型构造出线性表、栈、队列、树、图等复杂的抽象数据类型。 抽象数据类型 (Abstract Data Type, ADT) 一般指由用户定义的、表示应用问题的数学模型，以及定义在这个模型上的一组操作的总称，具体包括三部分：数据对象、数据对象上关系的集合以及对数据对象的基本操作的集合。 </li></ul><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>&ensp;&ensp;&ensp;&ensp;数据是指未经过处理的原始记录，是关于事件之一组离散且客观的事实描述，是构成消息和知识的原始材料。一般而言，数据缺乏组织及分类，无法明确的表达事物代表的意义，它可能是一堆的杂志、一大叠的报纸、数种的开会记录或是整本病人的病历纪录。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>&ensp;&ensp;&ensp;&ensp;结构是指在一个系统或者材料之中，互相关联的元素的排列、组织。结构按类别可分为等级结构（有层次地排列，由上至下，一对多）、网络结构（多对多）、晶格结构（临近的个体互相连接）等。</p><h2 id="数据元素"><a href="#数据元素" class="headerlink" title="数据元素"></a>数据元素</h2><p>&ensp;&ensp;&ensp;&ensp;数据元素是最基本的数据单位，比如描述学生信息的一条记录就是一个数据元素。</p><h2 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h2><p>&ensp;&ensp;&ensp;&ensp;一组相同性质的数据元素的集合，比如学校中所有学生的集合。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>&ensp;&ensp;&ensp;&ensp;数据结构是相互之间存在一种或多种特定关系的数据元素的集合，简单的说是计算机中存储、组织数据的方式。其包括逻辑结构和物理结构。</p><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><p>&ensp;&ensp;&ensp;&ensp;逻辑结构：逻辑结构是指数据元素之间的逻辑关系，独立于数据在计算机的存储方式，数据的逻辑结构可以看作是从具体问题抽象出来的数学模型。<br>&ensp;&ensp;&ensp;&ensp;逻辑结构又分为：线性结构、非线性结构。</p><ul><li>线性结构：（有且只有一个开始结点和一个终端结点，并且所有结点都最多只有一个直接前驱和一个直接后继）。线性结构典型的包括数组，链表，栈和队列。</li><li>非线性结构：（对应于线性结构，非线性结构也就是每个结点可以有不止一个直接前驱和直接后继）。非线性结构包括集合（集合结构中的数据元素之间除了“同属于一个集合”的关系外，别无其他关系。类似于数学上的集合），图，树。</li></ul><h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3><p>&ensp;&ensp;&ensp;&ensp;物理结构：存储结构是指数据结构在计算机中的表示（又称映像），也称物理结构。它包括数据元素的表示和关系的表示。数据的存储结构是逻辑结构用计算机语言的实现，它依赖于计算机语言。数据的存储结构主要有：顺序存储、链式存储、索引存储和散列存储。注意具体的实现存储的时候，可以选择在内存里面开辟连续内存空间或者不连续的内存空间来进行存储。当然也可以混搭组成更复杂的存储方式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;数据类型是一个值的集合和定义在此集合上一组操作（通常是增删改查或者操作读写的</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://zhcloud99.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构与算法" scheme="https://zhcloud99.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>运算符</title>
    <link href="https://zhcloud99.github.io/20210329083350.html"/>
    <id>https://zhcloud99.github.io/20210329083350.html</id>
    <published>2021-03-29T12:33:50.000Z</published>
    <updated>2021-03-30T07:14:18.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运算符给概述"><a href="#运算符给概述" class="headerlink" title="运算符给概述"></a><strong>运算符给概述</strong></h2><p><img src="/20210329083350/E1LZU%5D02SY%25NY%5BHL82WFV_U.png"></p><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a><strong>算数运算符</strong></h2><ul><li>+、-、*、/、%   加、减、乘、除、取模（余数）</li><li>++/–<br>&ensp;&ensp;&ensp;&ensp;++/–在运算后表示自变量加减/一。++/–出现在自变量前，表示先加/减一，再做赋值运算；++/–出现在自变量后，表示先做赋值运算，再加/减一。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorTest1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">11</span>;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> c=<span class="number">13</span>;</span><br><span class="line">        in d=<span class="number">14</span>;</span><br><span class="line">        a++;</span><br><span class="line">        ++b;</span><br><span class="line">         System.out.println(a);   <span class="comment">//自加已经结束，输出12</span></span><br><span class="line">        Sydtem.out,println(b);   <span class="comment">//自加已经结束，输出13</span></span><br><span class="line">        System.out.println(c++); <span class="comment">//先输出打印，再自加，输出13</span></span><br><span class="line">        System.out.println(c);   <span class="comment">//已经自加，输出14</span></span><br><span class="line">        System.out.println(++d);  <span class="comment">//先进行自加，再进行打印输出，输出15</span></span><br><span class="line">        System.out,println(d);    <span class="comment">//已经进行自加，输出15</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a><strong>关系运算符</strong></h2><ul><li><blockquote><p>、&gt;=、&lt;、&lt;=、==、!=。大于、大于等于、小于、小于等于、相等、不等于，这些关系运算符的运算结果都是布尔类型（true/false），两个符号的话，中间不可以有空格。<br>&ensp;&ensp;&ensp;&ensp;<strong>注意：</strong>=为赋值运算符，==为关系运算符，判断是否相等</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorTest2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">10</span>;        </span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">15</span>;</span><br><span class="line">        System.out.println(a&gt;b);       <span class="comment">//false</span></span><br><span class="line">        System.out.println(a&gt;=b);      <span class="comment">//false</span></span><br><span class="line">        System.out.println(a&lt;b);      <span class="comment">//true</span></span><br><span class="line">        System.out.println(a&lt;=b);     <span class="comment">//false</span></span><br><span class="line">        System.out.println(a==b);    <span class="comment">//false</span></span><br><span class="line">        System.out.println(a!=b);   <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符（）"><a href="#逻辑运算符（）" class="headerlink" title="逻辑运算符（）"></a><strong>逻辑运算符（）</strong></h2><h3 id="amp-（与）、-（或）、-（非）"><a href="#amp-（与）、-（或）、-（非）" class="headerlink" title="&amp;（与）、|（或）、!（非）"></a>&amp;（与）、|（或）、!（非）</h3>&ensp;&ensp;&ensp;&ensp;逻辑运算符要求运算符两边都是布尔类型，并且最终的结果也是布尔类型。<br>对于逻辑与&amp;，有一个为false，结果就为false；对于逻辑|，有一边为true，结果就为true；逻辑！为取反。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorTest3</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">6</span>;</span><br><span class="line">        System.out.println(a&gt;b&amp;a!=b);   <span class="comment">//false</span></span><br><span class="line">        System.out.println(a&lt;b|a!=b);   <span class="comment">//true</span></span><br><span class="line">        System.out.println(!(a=b));     <span class="comment">//true</span></span><br><span class="line">        System.out.println(!(a&gt;b&amp;a!=b&amp;a&lt;b));      <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="短路与-amp-amp-、短路或"><a href="#短路与-amp-amp-、短路或" class="headerlink" title="短路与&amp;&amp;、短路或||"></a>短路与&amp;&amp;、短路或||</h4></li></ul><p>&ensp;&ensp;&ensp;&ensp;短路与&amp;&amp;、短路||的运行结果与&amp;、|的运行结果一致，只不过是短路与&amp;&amp;、短路或||在执行的时候会发生短路现象。<br>&ensp;&ensp;&ensp;&ensp;短路现象：逻辑&amp;出现一个为false，结果就为false；逻辑|出现一个为true，结果就为true。短路现象就是：使用短路与&amp;&amp;时，最左边表达式为false时，右边的表达式就不执行了，判定结果为false；短路||就是最左边的表达式为true时，右边的表达式就不执行了，判定结果为true。<br>&ensp;&ensp;&ensp;&ensp;在以后的开发中，逻辑&amp;、|跟短路&amp;&amp;、||是需要同时并存的，大部分情况下使用&amp;&amp;、||的效率更高一些，只有右边的语句需要执行的时候，才选择&amp;、|。</p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a><strong>赋值运算符</strong></h2><h3 id="基本赋值运算符"><a href="#基本赋值运算符" class="headerlink" title="基本赋值运算符="></a>基本赋值运算符=</h3><p>&ensp;&ensp;&ensp;&ensp;赋值运算符“=”右边的优先级比较高，先执行右边的表达式。</p><h3 id="扩展赋值运算符-、-、-、-、"><a href="#扩展赋值运算符-、-、-、-、" class="headerlink" title="扩展赋值运算符+=、-=、*=、/=、%="></a>扩展赋值运算符+=、-=、*=、/=、%=</h3><p>&ensp;&ensp;&ensp;&ensp;注意：两个符号之间不可以有空格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//public class OperatorTest5&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">5</span>;</span><br><span class="line">        <span class="comment">// a=a+5;</span></span><br><span class="line">        <span class="comment">//a +=5;</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上述代码，不论是写第四行还是第五行，运行结果都是一样的，那么区别在哪里呢？看以下代码：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorTest6</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> a=<span class="number">5</span>;</span><br><span class="line">         <span class="comment">//a=a+5;    //使用此行代码编译会报错，a+5编译后为int类型，变量a为byte</span></span><br><span class="line">        <span class="comment">// 类型，不兼容的类型: 从int转换到byte可能会有损失。</span></span><br><span class="line">        <span class="comment">//a +=5;    //使用此行代码编译不会报错，说明扩展运算符不改变运算后的变量</span></span><br><span class="line">        <span class="comment">//的类型，相当于加了强制转换，功能等同于a=(byte)a+5;</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件运算符（三目运算符）"><a href="#条件运算符（三目运算符）" class="headerlink" title="条件运算符（三目运算符）"></a><strong>条件运算符（三目运算符）</strong></h2><p>&ensp;&ensp;&ensp;&ensp;语法格式：     布尔表达式？表达式1:表达式2<br>&ensp;&ensp;&ensp;&ensp;执行原理：布尔表达式结果为true时，表达式1的结果作为执行的结果；布尔表达式结果为false时，表达式2的结果作为执行的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorTest7</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">         <span class="keyword">boolean</span> xingBie=<span class="keyword">false</span>;</span><br><span class="line">         <span class="keyword">char</span> a=xingBie?<span class="string">&#x27;男&#x27;</span>:<span class="string">&#x27;女&#x27;</span>;</span><br><span class="line">         <span class="comment">//char a=xingBie?&#x27;男&#x27;:&quot;女&quot;;   编译报错， String无法转换为char</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(xingBie?<span class="string">&#x27;男&#x27;</span>:<span class="string">&quot;女&quot;</span>);   <span class="comment">//可以编译</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串连接运算符"><a href="#字符串连接运算符" class="headerlink" title="字符串连接运算符+"></a><strong>字符串连接运算符+</strong></h2><p>&ensp;&ensp;&ensp;&ensp;作用一：求和，+两边都是数字类型的时候进行求和运算，或者一边是char一边是数字类型（混合运算）。<br>&ensp;&ensp;&ensp;&ensp;作用二：字符串连接符，当+任意一边为字符串类型，+会进行字符串拼接操作，字符串拼接完成后还是一个字符串。<br>&ensp;&ensp;&ensp;&ensp;注意：出现多个加号时，若没有小括号，从左往右依次进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorTest8</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">15</span>;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">20</span>;</span><br><span class="line">        System.out.println(a+b+<span class="number">100</span>);      <span class="comment">//输出135</span></span><br><span class="line">        System.out.println(a+b+<span class="string">&quot;100&quot;</span>);      <span class="comment">//输出35100</span></span><br><span class="line">        System.out.println(a+<span class="string">&quot;b&quot;</span>+<span class="number">100</span>);       <span class="comment">//输出1520100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制输出内容：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String name=<span class="string">&quot;某某人&quot;</span>；</span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎&quot;</span>+name+<span class="string">&quot;回来&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用变量在控制台输出100+200=300；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorTest10</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">200</span>;</span><br><span class="line">        <span class="keyword">int</span> c=<span class="number">300</span>;</span><br><span class="line">        System.out.println(a+<span class="string">&quot;+&quot;</span>+b+<span class="string">&quot;=&quot;</span>+c);  <span class="comment">//在这里将输出的“+”、与“=”当</span></span><br><span class="line">        <span class="comment">//成字符串就可以实现</span></span><br><span class="line">     <span class="comment">//小技巧：两个字符串中间插入变量，直接在两个字符串中间+变量名+，</span></span><br><span class="line">     <span class="comment">//&quot;即字符串&quot;+变量名+&quot;字符串&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;运算符给概述&quot;&gt;&lt;a href=&quot;#运算符给概述&quot; class=&quot;headerlink&quot; title=&quot;运算符给概述&quot;&gt;&lt;/a&gt;&lt;strong&gt;运算符给概述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/20210329083350/E1LZU%5D02S</summary>
      
    
    
    
    <category term="Java基础" scheme="https://zhcloud99.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java基础" scheme="https://zhcloud99.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>数据类型-2</title>
    <link href="https://zhcloud99.github.io/20210329082651.html"/>
    <id>https://zhcloud99.github.io/20210329082651.html</id>
    <published>2021-03-29T12:26:51.000Z</published>
    <updated>2021-03-30T07:14:26.351Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整数赋值给char问题"><a href="#整数赋值给char问题" class="headerlink" title="整数赋值给char问题"></a><strong>整数赋值给char问题</strong></h2><p>&ensp;&ensp;&ensp;&ensp;之前学习了char定义字符型自变量与整数型的自变量，现在研究整数能否直接赋值给char？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharTest1</span></span>&#123;</span><br><span class="line">    <span class="function">Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> a=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> b=<span class="number">97</span>;</span><br><span class="line">        System.out.println(a);   </span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;上述代码第五行输出字符a，第六行同样输出字符a，97转换为二进制后认为是Unicode编码且与‘a’转换为二进制对应的二进制Unicode编码是一样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharTest2</span></span>&#123;</span><br><span class="line">    <span class="function">Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="comment">/* char a=65536;   超出char值范围，需要强制转换*/</span></span><br><span class="line">       <span class="keyword">char</span> a=(<span class="keyword">char</span>)<span class="number">65536</span>;</span><br><span class="line">        System.out.println(a);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;上述代码,当直接向char赋整数值时，超过65535就需要进行强制转换，舍去高字节，留下低两个字节，然后输出对应的字符。</p><h2 id="byte、short、char的混合运算"><a href="#byte、short、char的混合运算" class="headerlink" title="byte、short、char的混合运算"></a>byte、short、char的混合运算</h2><p>&ensp;&ensp;&ensp;&ensp;byte、short、char作混合运算的时候，先各自转换为int整数型字面量，再做运算。即结果为大容量赋值给小容量，在这里需要注意的是，因为编译器只会检测不同类型的自变量做了运算，并不知道结果是什么，只知道是int类型的，所以不管运算结果有没有超范围，都必须加（）进行强制转换。如以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharTest2</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>  a=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">short</span> b=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">byte</span>  c=(<span class="keyword">byte</span>)(a+b);    <span class="comment">//不管结果有没有超出byte的范围，都必须这样强制转换</span></span><br><span class="line">    System.out.println(c);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">同理以下代码：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">byte</span> b=a;</span><br><span class="line">        System.out.println(b);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;同样无法编译，这就说明编译器在编译阶段只会检查语法有没有错，上述代码编译器编译时只知道a是int型自变量，赋值给字节型自变量b时也只知道是int型赋值给了byte型，大容量赋值给小容量，而且并不知道具体值是多少，有没有超也不知道，所以就会报错。（直接赋值给byte、short是可以识别超没超的）</p><h2 id="多种数据类型混合运算"><a href="#多种数据类型混合运算" class="headerlink" title="多种数据类型混合运算"></a>多种数据类型混合运算</h2><p>&ensp;&ensp;&ensp;&ensp;多种数据类型混合运算时，最终结果是最大容量的自变量对应的类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">byte</span> b=<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">char</span> c=<span class="number">3</span>;</span><br><span class="line">  <span class="keyword">short</span> d=a+b+c;    </span><br><span class="line">   <span class="comment">/*   a+b+c编译时，认为结果为int型但是不知道结果超没超，又是大容量转为小容量，</span></span><br><span class="line"><span class="comment">   所以编译会报错</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">        System.out.println(d);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">byte</span> b=<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">char</span> c=<span class="number">3</span>;</span><br><span class="line">  <span class="keyword">long</span> d=a+b+c;</span><br><span class="line">   <span class="comment">/*   a+b+c编译时，认为结果为int型，虽然不知道结果超没超，但是是小容量转为大容量，</span></span><br><span class="line"><span class="comment">   所以编译不会报错</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">        System.out.println(d);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="以下个人瞎想部分"><a href="#以下个人瞎想部分" class="headerlink" title="以下个人瞎想部分"></a>以下个人瞎想部分</h2><hr><p>&ensp;&ensp;&ensp;&ensp;为什么short、byte、char先各自转换为int整数型字面量，再做运算呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">short</span> a=<span class="number">32767</span>;</span><br><span class="line">   <span class="keyword">byte</span> b=<span class="number">2</span>;</span><br><span class="line">   <span class="keyword">short</span> d=a+b;</span><br><span class="line">       System.out.println(d);  </span><br><span class="line">  <span class="comment">// byte a=128;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;如果都只按照多种数据类型混合运算时，最终结果是最大容量的自变量对应的类型这种规则的话，在编译时以上代码是不会出错的，但是明显的是，在运行时d的结果为32768，超出了short能够表示的范围，所以大概因此引入了转换为int的规则来强制转换，预防这种装不下的情况吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharTest</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>  a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">short</span> b=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span>  c=a+b+<span class="number">2147483647</span>;    </span><br><span class="line">    <span class="comment">// 第五行改为 int c=(int)(a+b+2147483647);    结果也是一样</span></span><br><span class="line">    System.out.println(c);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这种情况下int也装不下了，但是会自动强制转换，所以为啥上面的就引入了人int这个说法？*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="浮点型数据（float、double）"><a href="#浮点型数据（float、double）" class="headerlink" title="浮点型数据（float、double）"></a>浮点型数据（float、double）</h2><p>&ensp;&ensp;&ensp;&ensp;float单精度、四个字节                         double双精度、八个字节<br>&ensp;&ensp;&ensp;&ensp;<strong>注意：</strong>在银行或者财务软方面，即使是double也是远远不够的，在java中提供了一种精度更高的类型，专门使用在需要高精度情况下，java.math.BigDecimal(引用数据类型)<br>float、double存储的也是近似值，因为某些数据是无限的而计算机的内存有限。<br>&ensp;&ensp;&ensp;&ensp;容量方面，任意一个浮点型的容量都比整数型要大（即使long型占用8字节，float占用4字节，个人理解大概是因为浮点型有小数点后面的数要表示，数据存储方式可能不同吧）。<br>&ensp;&ensp;&ensp;&ensp;在java中规定呢，任何一个浮点型数据被默认为是当作double类型来处理的，想当为float类型，在字面量后面加F\f。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FloatTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> a=<span class="number">3.333</span>;   <span class="comment">//不存在类型转换</span></span><br><span class="line">        <span class="keyword">float</span>  b=<span class="number">3.3333</span>；  <span class="comment">//存在类型转换，且无法编译（无法兼容的数据类型，从</span></span><br><span class="line">        <span class="keyword">double</span>转换到<span class="keyword">float</span>可能会有损失）</span><br><span class="line">        <span class="keyword">float</span>  c=<span class="number">3.15F</span>;    <span class="comment">//不存在类型转换</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">分析以下代码：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FloatTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">20.0</span>/<span class="number">4</span>;    <span class="comment">//不兼容的类型: 从double转换到int可能会有损失,因</span></span><br><span class="line">        为<span class="number">4</span>先转换为<span class="keyword">double</span>，再做运算，结果为<span class="keyword">double</span>。</span><br><span class="line">        <span class="comment">/*可修该为*/</span></span><br><span class="line">        <span class="keyword">int</span> i=（<span class="keyword">int</span>）<span class="number">20.0</span>/<span class="number">4</span>;</span><br><span class="line">        <span class="comment">/*或者*/</span></span><br><span class="line">        <span class="keyword">int</span> i=(<span class="keyword">int</span>)(<span class="number">20.0</span>/<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="布尔型数据boolean"><a href="#布尔型数据boolean" class="headerlink" title="布尔型数据boolean"></a>布尔型数据boolean</h2><p>&ensp;&ensp;&ensp;&ensp;在Java语言中boolean只有false、true两个值（不像c或者c++语言中1和0也可以表示boolean类型），而且其他的数据类型无法与布尔型进行数据转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BooleanTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">20</span>;</span><br><span class="line">        System.out.println(a&gt;b);</span><br><span class="line">        System.out.println(a&lt;b);        <span class="comment">///输出结果用boolean型判断</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BooleanTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> xingBie=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(xingBie)&#123;               <span class="comment">//如果性别的布尔值为true</span></span><br><span class="line">            System.out.println(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型转换总结"><a href="#数据类型转换总结" class="headerlink" title="数据类型转换总结"></a>数据类型转换总结</h2><ul><li>八种数据类型只有boolean型不可以转换，其它的都可以进行转换</li><li>整数型字面量默认为int，如果整数型字面量没有超过byte、short、char的范围的话，可以直接赋值给byte、short、char</li><li>小容量赋值给大容量，称为自动类型转换，容量从小到达排序byte&lt;short（char）&lt;int&lt;long&lt;float&lt;double</li><li>其它大容量赋值给小容量情况需要强制转换，即使没超过范围也需要强制转换,添加强制类型转换符，但是运行时精度可能会有损失。</li><li>byte、short、char类型混合运算，先各自转换为int类型，再做运算</li><li>多种数据类型做混合运算，先各自转换为容量最大的那一种再做运算，运算结果类型也是容量最大的那个类型。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;整数赋值给char问题&quot;&gt;&lt;a href=&quot;#整数赋值给char问题&quot; class=&quot;headerlink&quot; title=&quot;整数赋值给char问题&quot;&gt;&lt;/a&gt;&lt;strong&gt;整数赋值给char问题&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp</summary>
      
    
    
    
    <category term="Java基础" scheme="https://zhcloud99.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java基础" scheme="https://zhcloud99.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>数据类型-1</title>
    <link href="https://zhcloud99.github.io/20210329081026.html"/>
    <id>https://zhcloud99.github.io/20210329081026.html</id>
    <published>2021-03-29T12:10:26.000Z</published>
    <updated>2021-03-30T07:14:08.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型有什么用"><a href="#数据类型有什么用" class="headerlink" title="数据类型有什么用"></a><strong>数据类型有什么用</strong></h2><p>&ensp;&ensp;&ensp;&ensp;数据有不同的类型同时也声明了变量也有不同的类型，根据数据类型的不同为定义的变量分配不同的空间。</p><h2 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a><strong>数据类型分类</strong></h2><p>&ensp;&ensp;&ensp;&ensp;第一种:基本数据类型（四大类八小种）<br>&ensp;&ensp;&ensp;&ensp;第一类：整数型   byte（占用1字节）、short（2）、int（4）、long（8）<br>&ensp;&ensp;&ensp;&ensp;第二类：浮点型   float（4）、double（8）<br>&ensp;&ensp;&ensp;&ensp;第三类：布尔型   boolean   （只有两个值false、ture，占用1字节）<br>&ensp;&ensp;&ensp;&ensp;第四类：字符型   char（2）<br>&ensp;&ensp;&ensp;&ensp;第二种：引用数据类型除了基本数据类型都是引用数据类型，如String字符串</p><p>&ensp;&ensp;&ensp;&ensp;<strong>byte类型取值范围为什么是127到-128？</strong><br>&ensp;&ensp;&ensp;&ensp;一个byte由八个位组成，如00000000，其中，前7位表示数值，第8位是符号位（0为正，1为负）。这样+1就是00000001，-1就是10000001。最大的正数就是0 1111111，即2^0+2^1+……+2^6=127；最小的负数，同理，为1 1111111，即-127。<br>&ensp;&ensp;&ensp;&ensp;到这里应该是许多人不明白的地方，为什么负数会到-128。<br>&ensp;&ensp;&ensp;&ensp;上述的描述会出现一个问题，就是0，会出现一个+0和一个-0。印度人他们规定-0为-128，这样就与计算机的补码（程序都是按补码运行的）完美的结合在一起。以此类推，int，short，long都可以推出他们的取值范围。<br>&ensp;&ensp;&ensp;&ensp;根据微机原理，机器字长为n位的补码数，其真值的取值范围是-（2^n）~+2^n+1），这里的取值范围可按照这个规定来计算。</p><h2 id="转义字符“-”"><a href="#转义字符“-”" class="headerlink" title="转义字符“ \”"></a><strong>转义字符“ \”</strong></h2><p>&ensp;&ensp;&ensp;&ensp;在Java语言中“\”负责转义，“\”对其后面的一个字符进行转义，即编译代码一旦遇到“\”，就会赋予后面这个字符特殊的含义或者功能。</p><ul><li>\t    制表符        \n    换行</li><li>\    表示第二个“\”只是代表字符“\”，没有别的含义</li><li>&#39;      表示“’”只是代表字符“’”，没别的含义</li><li>\u    后面可以跟Unicode码，输出对应字符<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> n1=<span class="string">&#x27;\n&#x27;</span>;   <span class="comment">//将n转义为换行赋给变量n1</span></span><br><span class="line">        <span class="keyword">char</span> n2=<span class="string">&#x27;\t&#x27;</span>;   <span class="comment">//将t转义为制表符赋给变量n2</span></span><br><span class="line">        <span class="keyword">char</span> n3=<span class="string">&#x27;\\&#x27;</span>;   <span class="comment">//\转义为字符赋给变量n3</span></span><br><span class="line">        <span class="keyword">char</span> n4=<span class="string">&#x27;\&#x27;&#x27;</span>;   <span class="comment">//&#x27;转义为字符赋给变量n4</span></span><br><span class="line">        <span class="keyword">char</span> n5=<span class="string">&#x27;\u4e2d&#x27;</span>;   <span class="comment">//将“中”字符赋给变量n5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mian</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> n6=<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;武汉&quot;</span>+n6+<span class="string">&quot;加油&quot;</span>);</span><br><span class="line">         <span class="comment">//System.out.println(&quot;武汉n6加油&quot;);   这里只会把n6当成普通字符串输出，</span></span><br><span class="line">         不会换行</span><br><span class="line">        System.out.println(<span class="string">&quot;武汉\n加油&quot;</span>)；   <span class="comment">//四六行功能一致</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\&quot;武汉加油\&quot;&quot;</span>)；   <span class="comment">//输出有英文符&quot;武汉加油&quot;，不将里</span></span><br><span class="line">        面的<span class="string">&quot;&quot;</span>当作检测字符串开始或者结束的标志。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&ensp;&ensp;&ensp;&ensp;<strong>注意：</strong>所谓转义字符，转义字符，就必须把它当成字符用，不论是定义时还是直接用，都必须在’’或者””里面才可以。</p><h2 id="八种数据类型详解"><a href="#八种数据类型详解" class="headerlink" title="八种数据类型详解"></a><strong>八种数据类型详解</strong></h2><h3 id="字符型char"><a href="#字符型char" class="headerlink" title="字符型char"></a>字符型char</h3><p>&ensp;&ensp;&ensp;&ensp;<a href="https://blog.csdn.net/qq_29232943/article/details/62235608"><strong>参考文章</strong></a><br>&ensp;&ensp;&ensp;&ensp;什么是字符编码？字符编码就是人为的定义的一套转换表，规定了一系列的文字与之相对应的二进制。<br>计算机最开始支持文字的时候，首先开始支持的是英文，英文对应的编码方式是ASCII码，每个字符只需占用一个字节，且最高位恒为0，就可以表示英文及一些符号的所有二进制情况。<br>&ensp;&ensp;&ensp;&ensp;随着计算机语言的发展，国际组织制顶了ISO-8859-1编码方式，又称为latin-1编码方式，向上兼容ASCII码，但是不支持中文。发展到亚洲时，开始支持中文、日文、韩文……</p><ul><li>中文编码方式：GB2312&lt;GBK&lt;GB18030(容量关系)</li><li>繁体中文：big5（大5码）<br>&ensp;&ensp;&ensp;&ensp;在java中，java语言为了支持全球所有的文字，采所用的编码方式叫做Unicode编码，如UTF-8、UTF-16、UTF-32。<br>&ensp;&ensp;&ensp;&ensp;—&gt;char占用两个字节，定义一个字符，在Unicode的编码中一个字符占用两个字节。     </li></ul><h3 id="整数型byte、short、int、long"><a href="#整数型byte、short、int、long" class="headerlink" title="整数型byte、short、int、long"></a>整数型byte、short、int、long</h3><h4 id="整数型字面量的四种表示方式："><a href="#整数型字面量的四种表示方式：" class="headerlink" title="整数型字面量的四种表示方式："></a>整数型字面量的四种表示方式：</h4><p>&ensp;&ensp;&ensp;&ensp;二进制0b开头，八进制0开头，十进制直接写，十六进制0x开头，但是输出都是十进制，如下代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">023</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">23</span>;</span><br><span class="line"><span class="keyword">int</span> c=<span class="number">0x23</span>;</span><br><span class="line"><span class="keyword">int</span> d=<span class="number">0b100</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(c);</span><br><span class="line">System.out.println(d);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="整数型字面量之间的转换"><a href="#整数型字面量之间的转换" class="headerlink" title="整数型字面量之间的转换"></a>整数型字面量之间的转换</h4><p>&ensp;&ensp;&ensp;&ensp;在任何情况下，整数型字面量/数据拿来用时，都是默认当作int类型来处理的，如果想让这个整数型字面量被当作long型来处理，整数型字面量后面加L/l就可以了。<br>&ensp;&ensp;&ensp;&ensp;既然默认整数型字面量为int型那么以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">2</span>;        <span class="comment">//没有类型转换</span></span><br><span class="line">        <span class="keyword">long</span> b=<span class="number">2</span>;       <span class="comment">//存在类型转换</span></span><br><span class="line">        <span class="keyword">long</span> c=<span class="number">2L</span>;      <span class="comment">//没有类型转换</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;默认的int整数型字面量的取值范围是-2147483648~2147483647，当字面量的取值大于2147483647时，不论定义的变量是什么类型，编译都会报错整数太大，即超出int的范围了。这些数肯定可以满足byte、short、int类型自变量的赋值，但我以默认的int型字面量向long型自变量赋值时，如果超过了2147483647，那该如何赋值？所以才引进了整数型自面量后面加L/l，就认为这个初始的整数型字面量为long型了，可以按照long的取值范围来赋值了。<br>&ensp;&ensp;&ensp;&ensp;默认的int整数型字面量向定义的自变量为byte、short赋值时，即大容量转换为小容量时，这种类型转换就是强制转换，若向自变量赋的值不超过自变量本身的范围时，编译不会报错；但是当赋的值超过了自变量本身的范围就会报错，如以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">byte</span> a=<span class="number">200000</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*如果想继续编译，在int型字面量前加（自变量类型），便可以编译，但是会有损失，如自变量的类型为byte，占用一个字节，强制转换后200000对应的四字节二进制码的高三个字节会被舍去，输剩下的一个字节对应的十进制数。如以下代码：*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">byte</span> a=(<span class="keyword">byte</span>)<span class="number">200000</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*默认的int整数型字面量向定义的自变量为long赋值时，即小容量转换为大容量时，这种类型转换是自动转换，可以直接转换。*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据类型有什么用&quot;&gt;&lt;a href=&quot;#数据类型有什么用&quot; class=&quot;headerlink&quot; title=&quot;数据类型有什么用&quot;&gt;&lt;/a&gt;&lt;strong&gt;数据类型有什么用&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;数据有不同</summary>
      
    
    
    
    <category term="Java基础" scheme="https://zhcloud99.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java基础" scheme="https://zhcloud99.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>变量</title>
    <link href="https://zhcloud99.github.io/20210329075113.html"/>
    <id>https://zhcloud99.github.io/20210329075113.html</id>
    <published>2021-03-29T11:51:13.000Z</published>
    <updated>2021-03-30T07:13:57.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h2><p>&ensp;&ensp;&ensp;&ensp;<strong>字面量：</strong>软件开发是为了解决显示生活中的问题，而现实世界中很多问题是用数据来进行描述的，所以软件的执行就是对数据的处理，java代码中用“字面量”这个概念去描数据。<br>&ensp;&ensp;&ensp;&ensp;<strong>字面量分类：</strong>整数型字面量、浮点型字面量、布尔型字面量、字符型字面量、字符串型字面量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&#x27;好&#x27;</span>);   <span class="comment">//字符型</span></span><br><span class="line">        System.out.println(<span class="string">&quot;好&quot;</span>);   <span class="comment">//字符串型</span></span><br><span class="line">        System.out.println(<span class="number">1</span>);     <span class="comment">//整数型</span></span><br><span class="line">        System.out.println(<span class="number">3.14</span>);  <span class="comment">//浮点型</span></span><br><span class="line">        System.out.println(<span class="keyword">true</span>); <span class="comment">//布尔型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;     </span><br><span class="line"><span class="comment">/*      不经过变量，直接输出</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="number">10</span>);  </span><br><span class="line">        System.out.println(<span class="number">10</span>); </span><br><span class="line">        System.out.println(<span class="number">10</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果只有单纯的字面量这个概念，上述代码输出3个整数型10，需要从内存中取出3个10去让cpu执行，3个10就占用了3个不同的内存空间。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">10</span>;</span><br><span class="line">        System.out.println(i);  </span><br><span class="line">        System.out.println(i); </span><br><span class="line">        System.out.println(i);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*上述代码定义了一个整数型变量i，可以赋值任意的一个整数，多次调用这个确定的整数时只要访问一块内存空间就可以了。*/</span></span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;<strong>定义：</strong>由上，变量其实就是内存中储存数据的最基本的单元，引入变量就是为了更好的调用各种类型的数据（字面量），更好的利用内存空间。<br>&ensp;&ensp;&ensp;&ensp;变量对应不同类型的字面量，所以定义的方法也不一样，如整数型int、带小数的double等，定义不同的类型的变量是为了给不同的数据分配不同的内存空间，如整数型占用四个字节的内存空间。<br>&ensp;&ensp;&ensp;&ensp;关于内存空间：每一个存储元或存储位可以存储一位二进制代码，称为1b，这个二进制代码是存储器中最小的存储单元，在计算机中存储器以字节为基本单元，每个单元包含八个二进制代码，称为1B。<br>&ensp;&ensp;&ensp;&ensp;<strong>变量的三要素：</strong></p><ul><li>类型（决定分配空间的大小）</li><li>名字（首字母第一个单词小写，剩下首字母大写）</li><li>值（需要内存保存的数据）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        i=<span class="number">45</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarTest1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">45</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarTest2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>=<span class="number">45</span>；</span><br><span class="line">System.out.println(i);</span><br><span class="line">i=<span class="number">60</span>;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;            </span><br><span class="line"> <span class="comment">/*   重复赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">代码由上至下执行，先执行等号右边的，可以先定义后赋值，也可以在定义过程中赋值，先赋值再定义肯定不可以，同样可以重复赋值，先输出<span class="number">45</span>，再输出<span class="number">60</span>。</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarTest3</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ninaLing=<span class="number">45</span>;</span><br><span class="line">System.out.println(nianLing);</span><br><span class="line"><span class="keyword">int</span> nianLing=<span class="number">20</span>;</span><br><span class="line">System.out.println(nianLing);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/*   同一个域当中变量重名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">在同一个域（变量的有效范围）当中，变量可以重新赋值，但不可以重复定义（类型不一样也不可以），可以理解为这一块域划分了一定的内存空间，当调用这个内存空间的变量时，发现了两个一样名字的变量，必将无法调用。</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarTest4</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1000</span>;    <span class="comment">//成员变量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">100</span>;   <span class="comment">//局部变量</span></span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">x</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">200</span>;   <span class="comment">//局部变量</span></span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;<strong>变量的分类</strong>（根据变量出现的位置进行划分）：</p><ul><li>局部变量是在方法体中声明的变量，局部变量只在方法体当中有效，方法体执行完毕之后该变量的内存就释放了。</li><li>成员变量是在方法体之外，类体内声明的变量。</li><li>上述代码虽然多次定义了变量i，但是分别处于类体、main方法、x方法这些不同的域中（出了大括号就不认识了），所以可以正常编译，但是执行会输出100，为就近原则。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarTest5</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;<span class="number">10</span>;i++);  <span class="comment">//for域定义变量n</span></span><br><span class="line">System.out.println(n);  <span class="comment">//main域输出变量n</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">上述代码在<span class="keyword">for</span>域定义变量n，但是输出是在main域，无法编译。</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarTest6</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">&#125;           <span class="comment">//for循环结束，n释放</span></span><br><span class="line">System.out.println(n);   <span class="comment">//找不到n，无法编译</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">上述代码在<span class="keyword">for</span>循环中定义变量n，<span class="keyword">for</span>语句结束后n就释放了，再输出n便报错，无法编译。</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarTest7</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        &#125;           </span><br><span class="line">    System.out.println(n);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">上述代码先在main域中定义的变量n，输出也是在main域，没有问题。</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarTest5</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c=<span class="number">100</span>;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">    System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/*    同一行声明多个变量情况</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;&lt;strong&gt;变量&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;&lt;strong&gt;字面量：&lt;/strong&gt;软件开发是为了解</summary>
      
    
    
    
    <category term="Java基础" scheme="https://zhcloud99.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java基础" scheme="https://zhcloud99.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>标识符与关键字</title>
    <link href="https://zhcloud99.github.io/20210329042405.html"/>
    <id>https://zhcloud99.github.io/20210329042405.html</id>
    <published>2021-03-29T08:24:05.000Z</published>
    <updated>2021-03-30T07:14:35.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a><strong>标识符</strong></h2><p>&ensp;&ensp;&ensp;&ensp; <strong>概念</strong>：    概念：在editplus中显示高亮颜色为黑色的，程序员有自己权力命名的单词为标识符（方法名是规定的除外）。<br>&ensp;&ensp;&ensp;&ensp;<strong>标识符举例</strong>：类名、方法名、接口名、变量名、常量名<br>&ensp;&ensp;&ensp;&ensp; <strong>命名规则：</strong></p><ul><li>由数字、字母（包括中文）、下划线、$组成，不能由数字开头</li><li> 标识符中不能有空格（编译器在class后寻找标识符，再寻找{}，中间添加了空格如class Hello World{}，只会把类名Hello当作标识符，然后识别不到{}就会报错，无法编译。）</li><li>关键字不可以做标识符</li><li>标识符严格区分大小写（大小写不同），但是对于类名来说，若两个定义了两个类名只是大小写不同，只生成先定义的那个class文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">&#125;                    <span class="comment">//编译时。只生成A.calss</span></span><br></pre></td></tr></table></figure><pre><code class="java">class a&#123;&#125;class A&#123;&#125;                  //编译时只生成a.class</code></pre><p>&ensp;&ensp;&ensp;&ensp;<strong>文件命名问题</strong>：在windos中命名123.java文件是没有问题的，但是编写代码定义public的类就不可以，因为规定public定义的类的类名必须与文件名保持一致，而类名为标识符，不可以以数字开头。</p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a><strong>关键字</strong></h2><p>&ensp;&ensp;&ensp;&ensp;概念：sun公司开发java语言时，提前定义好的具有特殊含义的单词。<br>&ensp;&ensp;&ensp;&ensp;注意：java语言是严格区分大小写的，所有的关键字全部小写。<br>&ensp;&ensp;&ensp;&ensp;常用关键字：<br><img src="/20210329042405/clipboard.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;标识符&quot;&gt;&lt;a href=&quot;#标识符&quot; class=&quot;headerlink&quot; title=&quot;标识符&quot;&gt;&lt;/a&gt;&lt;strong&gt;标识符&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp; &lt;strong&gt;概念&lt;/strong&gt;：    </summary>
      
    
    
    
    <category term="Java基础" scheme="https://zhcloud99.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java基础" scheme="https://zhcloud99.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
